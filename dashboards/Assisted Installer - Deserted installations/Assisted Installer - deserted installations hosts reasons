SELECT TRIM(host_reason) AS host_reason_trimmed,
       count(*) AS count
FROM
  (WITH installed_clusters as
     (SELECT ai_cluster_id
      FROM raw_assisted_installer_clusters raw
      WHERE JSON_VALUE(content, 'strict $.status') = 'installing'
      GROUP BY ai_cluster_id),
        added_hosts AS
     (SELECT DISTINCT(ai_cluster_id) as ai_cluster_id
      from raw_assisted_installer_events
      WHERE content LIKE '%"name": "host_registration_succeeded"%'
      GROUP BY ai_cluster_id),
        validations_info AS
     (SELECT raw_assisted_installer_clusters.ai_cluster_id,
             MIN(created_at) as created_at,
             MAX(updated_at) as updated_at,
             MAX_BY(json_value(content, 'lax $.validations_info'), updated_at) as vinfo,
             MAX_BY(JSON_VALUE(content, 'strict $.status'), updated_at) as status,
             MAX_BY(JSON_VALUE(content, 'strict $.status_info'), updated_at) as status_info,
             MAX_BY(JSON_VALUE(content, 'strict $.high_availability_mode'), updated_at) as ha_mode,
             CAST(MAX_BY(JSON_VALUE(content, 'strict $.hosts.size()'), updated_at) AS INTEGER) as n_hosts,
             CAST(MAX_BY(json_extract(content, '$.hosts'), updated_at) AS ARRAY<MAP<VARCHAR, JSON>>) as hosts_array,
             MAX_BY(JSON_QUERY(content, 'lax $.hosts'), updated_at) as hosts
      FROM raw_assisted_installer_clusters
      INNER JOIN added_hosts ah ON raw_assisted_installer_clusters.ai_cluster_id = ah.ai_cluster_id
      WHERE raw_assisted_installer_clusters.ai_cluster_id NOT IN
          (SELECT ai_cluster_id
           FROM installed_clusters)
        AND NOT (email_domain LIKE '%redhat.com'
                 or email_domain LIKE '%ibm.com'
                 or email_domain LIKE '%juniper.net')
        AND length(content) < 25000000
      GROUP BY raw_assisted_installer_clusters.ai_cluster_id),
        array_vinfo AS
     (SELECT ai_cluster_id,
             status,
             created_at,
             status_info,
             updated_at,
             ha_mode,
             n_hosts,
             hosts_array,
             hosts,
             CAST(json_extract(vinfo, '$.network') AS ARRAY<MAP<VARCHAR, VARCHAR>>) as network_array,
             CAST(json_extract(vinfo, '$.configuration') AS ARRAY<MAP<VARCHAR, VARCHAR>>) as configuration_array,
             CAST(json_extract(vinfo, '$.operators') AS ARRAY<MAP<VARCHAR, VARCHAR>>) as operators_array,
             CAST(json_extract(vinfo, '$["hosts-data"]') AS ARRAY<MAP<VARCHAR, VARCHAR>>) as hosts_data_array,
             vinfo
      FROM validations_info vi),
        merged as
     (SELECT concat(network_array, configuration_array, operators_array, hosts_data_array) as failed_validations,
             status,
             status_info,
             ai_cluster_id,
             updated_at,
             ha_mode,
             n_hosts,
             hosts_array,
             hosts,
             created_at
      FROM array_vinfo),
        unnested_cluster_reason as
     (SELECT status,
             status_info,
             ai_cluster_id,
             updated_at,
             created_at,
             n_hosts,
             ZIP(CAST(transform(hosts_array, x -> x['status']) AS ARRAY<VARCHAR>), CAST(transform(hosts_array, x -> x['status_info']) AS ARRAY<VARCHAR>)) as host_statuses_info,
             hosts_array,
             hosts,
             if(ha_mode = 'Full', 'non-SNO', 'SNO') as ha_type,
             reason['id'] as reason_id,
             reason['status'] as reason_status,
             reason['message'] as reason_message
      FROM merged
      CROSS JOIN UNNEST(failed_validations) as t(reason)
      WHERE reason['status'] != 'success' ) ,
        unnested_host_status_info as
     (SELECT *
      FROM unnested_cluster_reason
      CROSS JOIN UNNEST(host_statuses_info) as t(host_status, host_status_info)),
        array_host_reason as
     (SELECT *,
             split(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(host_status_info, '^(Host cannot be installed due to following failing validation\(s\)|Host does not meet the minimum hardware requirements|Waiting for user input): '), 'detected for domain [^\s]*', 'detected for domain <domain>'), 'Address networks are overlapping: .*', 'Address network are overlapping'), 'resolve domain name [^\s]* on the host.', 'resolve domain name <domain> on the host.'), 'Require at least [^\s]*', 'Require at least X'), 'found only [^\s]*', 'found only Y'), 'name [^\s]* is ', 'name <hostname> is '), ';') as host_status_info_arr
      FROM unnested_host_status_info) SELECT *
   FROM array_host_reason
   CROSS JOIN UNNEST(host_status_info_arr) as t(host_reason)) AS virtual_table
GROUP BY TRIM(host_reason)
ORDER BY count DESC
LIMIT 1000;
